// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id         String   @id @map("guild_id")
  name       String?
  users      User[]
  createdAt  DateTime @default(now())
}

model User {
  id         String   @id @map("user_id")
  guildId    String
  guild      Guild    @relation(fields: [guildId], references: [id])
  notes      Note[]
  warnings   Warning[]
  mutes      Mute[]
  bans       Ban[]
  createdAt  DateTime @default(now())

  @@unique([id, guildId])
}

model Note {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  content    String
  createdBy  String
  createdAt  DateTime @default(now())
}

model Warning {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  reason     String
  createdBy  String
  createdAt  DateTime @default(now())
}

model Mute {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  reason     String
  createdBy  String
  duration   Int?     // In seconds, nullable for indefinite
  createdAt  DateTime @default(now())
  expiresAt  DateTime?
  active     Boolean  @default(true)
}

model Ban {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  reason     String
  createdBy  String
  createdAt  DateTime @default(now())
  active     Boolean  @default(true)
}
